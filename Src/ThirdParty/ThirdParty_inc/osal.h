/******************************************************************************
*
* osal.h - Operating System abstraction layer include file
* Copyright (c) notice
*
******************************************************************************/
#ifndef __OSAL_H__
#define __OSAL_H__
/******************************************************************************
* includes ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
#include "proj_inc/project_config.h"
#if (PROJ_CONFIG_USE_UTIL_OSAL == 0)
#define eOSAL_Task_Param_Init     (p)
#define eOSAL_Task_Create         (p)
#define eOSAL_Task_Delete         (p)
#define eOSAL_OS_start            ()
#define eOSAL_Is_OS_Running       ()
#define eOSAL_delay               (x, p)
#define eOSAL_Mailbox_Params_Init (p)
#define eOSAL_Mailbox_Create      (p)
#define eOSAL_Mailbox_Get_msg     (p)
#define eOSAL_Mailbox_Post_msg    (p)
#define eOSAL_Queue_Params_Init   (p)
#define eOSAL_Queue_Create        (p,pp)
#define eOSAL_Queue_Get_msg       (p,pp)
#define eOSAL_Queue_Post_msg      (p,pp)
#else //(PROJ_CONFIG_USE_UTIL_OSAL > 0)

#if (PROJ_CONFIG_OS == PROJ_CONFIG_OS_TIRTOS)
//TI RTOS XDCtools header files
  #include <xdc/runtime/Error.h>
  #include <xdc/std.h>
  #include <xdc/runtime/System.h>
  #include <xdc/runtime/Types.h>
//#include <xdc/runtime/knl/Semaphore.h>

//TI RTOS sysbios header files
  #include <ti/sysbios/BIOS.h>
//fatfs sysbios header files
  #include <ti/sysbios/fatfs/diskio.h>
//gate sysbios header files
  #include <ti/sysbios/gates/GateMutex.h>
  #include <ti/sysbios/gates/GateMutexPri.h>
//hal sysbios header files
  #include <ti/sysbios/hal/Timer.h>
  #include <ti/sysbios/family/arm/m3/Hwi.h>

//knl sysbios header files
  #include <ti/sysbios/knl/Task.h>
  #include <ti/sysbios/knl/Queue.h>
  #include <ti/sysbios/knl/Mailbox.h>
  #include <ti/sysbios/knl/Clock.h>
  #include <ti/sysbios/knl/Semaphore.h>

//driver sysbios header files
  #include <ti/drivers/SDSPI.h>
  #include <ti/drivers/sdspi/SDSPITiva.h>
  #include <ti/drivers/USBMSCHFatFs.h>
  #include <ti/drivers/GPIO.h>
#elif (PROJ_CONFIG_OS == PROJ_CONFIG_OS_FREERTOS)
  #include "FreeRTOS.h"
  #include "task.h"
#endif
/******************************************************************************
*public defines ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

#define OSAL_SEM_WAIT_TIMEOUT_WAITFOREVER    BIOS_WAIT_FOREVER
#define OSAL_SEM_WAIT_TIMEOUT_NO_WAIT        BIOS_NO_WAIT
#define OSAL_SEM_WAIT_TIMEOUT_1TICK          1
#define OSAL_SEM_WAIT_TIMEOUT_1SECOND        100000

#define OSAL_MBOX_WAIT_TIMEOUT_WAITFOREVER   BIOS_WAIT_FOREVER
#define OSAL_MBOX_WAIT_TIMEOUT_NO_WAIT       BIOS_NO_WAIT

#define OSAL_QUEUE_TIMEOUT_WAITFOREVER       -1
#define OSAL_QUEUE_TIMEOUT_NO_WAIT           0

/******************************************************************************
*public variables /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* external variables //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
*public enums /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/


/******************************************************************************
*public structures ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/
typedef struct OSAL_Task_Handle
{
  void * pvTask_Handle;
}OSAL_Task_Handle_t, * pOSAL_Task_Handle;

typedef struct OSAL_Mailbox_Handle_t
{
  uint32_t uiWait_time;         //OS wait time before returning
  uint16_t uiBuff_Size;         //size of each mailbox message
  void *   pvBuff;              //Pointer to the mailbox buffer, generated by the OSAL
  uint16_t uiNumber_of_items;   //number of mailbox messages
  void *   pvMailbox_Handle;    //OS mailbox handle, generated by the OSAL
}OSAL_Mailbox_Handle_t, * pOSAL_Mailbox_Handle;

typedef struct OSAL_Queue_Parameters_t
{
  uint32_t uiNum_Of_Queue_Elements;
  uint32_t uiSize_Of_Queue_Element;
  void * pMsgBuff;
  int32_t iTimeout;
}OSAL_Queue_Parameters_t, * pOSAL_Queue_Parameters;

typedef struct OSAL_Queue_Handle_t
{
  void * pHandle;
  uint32_t uiHandle_Index;
}OSAL_Queue_Handle_t, * pOSAL_Queue_Handle, * pQ_Handle;

typedef struct OSAL_Task_Parameters
{
    void (* pTaskFcn)(void * param);
    const char * pName;
    uint32_t uiStack_Size;
    void * pParameters;
    uint32_t uiTask_Priority;
}OSAL_Task_Parameters_t, * pOSAL_Task_Parameters;

typedef struct OSAL_Semaphone_Parameters_t
{

}OSAL_Semaphore_Parameters_t, * pOSAL_Semaphore_Parameters;

typedef struct OSAL_Semaphore_Handle_t
{
  void * pHandle;
  uint32_t uiHandle_Index;
}OSAL_Semaphore_Handle_t, *pOSAL_Semaphore_Handle;

typedef struct OSAL_Mutex_Parameters
{
  uint32_t uiTimeout;
}OSAL_Mutex_Parameters_t, * pOSAL_Mutex_Parameters;

typedef struct OSAL_Mutex_Handle
{
  void * pHandle;
  uint32_t uiHandle_Index;
}OSAL_Mutex_Handle_t, * pOSAL_Mutex_Handle;

typedef struct OSAL_Data_Mutex_Parameters
{
  uint32_t uiObject_Size;
  uint32_t uiTimeout;
}OSAL_Data_Mutex_Parameters_t, * pOSAL_Data_Mutex_Parameters;

typedef struct OSAL_Data_Mutex_Handle
{
  void * pHandle;
  uint32_t uiHandle_Index;
}OSAL_Data_Mutex_Handle_t, * pOSAL_Data_Mutex_Handle;

/******************************************************************************
* external functions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* public functions ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
******************************************************************************/

/******************************************************************************
* Name: eOSAL_Task_Param_Init
* Description:
*   Initializes the task parameters structure that can be used for
*   eOSAL_Task_Create().
*
* Parameters:
*   pOSAL_Task_Parameters pParam: pointer to a task parameters structure.
*
* Returns:
*   (ERROR_CODE):
*     = ER_OK: Parameters successfully initialized.
*     = ER_PARAM: The parameters to initialize were invalid.
*     = ER_FAIL: The parameters failed to be initialized.
*
* Example:
* void foo(void)
* {
*   ERROR_CODE eEC;
*   OSAL_Task_Parameters_t Task_Param_t;
*
*   //Initialize the task parameters
*   eEC = eOSAL_Task_Param_Init(&Task_Param_t);
*   ASSERT(eEC == ER_OK);
*
*   //remaining code
*   ...
*
*   return;
* }
******************************************************************************/
ERROR_CODE eOSAL_Task_Param_Init(pOSAL_Task_Parameters pParam);

/******************************************************************************
* Name: eOSAL_Task_Create
* Description:
*   Creates a task using the passed in task parameters structure.
*
* Parameters:
*   (pOSAL_Task_Parameters) pParam: pointer to the param structure
*     ->void (* pTaskFcn)(void * param):
*     ->(const char *)pName:
*     ->(uint32_t)uiStack_Size:
*     ->(void *)pParameters:
*     ->(uint32_t)uiTask_Priority:
*
* Returns:
*   (ERROR_CODE): description
*     = ER_OK: Task created
*     = ER_FAIL: Task failed to be created
*     = ER_FULL: Task creation limit reached
*
* Example:
* #define FOO_TASK_PRIORITY 1
* char cTaskName[] = "foo_task";
*
* void foo_task(void * pvParam)
* {
*   //task startup code
*   ...
*
*   while(1)
*   {
*     //task code
*     ...
*   }
* }
*
* void foo(void)
* {
*   ERROR_CODE eEC;
*   OSAL_Task_Parameters_t Task_Param_t;
*
*   //Initialize the task parameters
*   ...
*
*   //Set the task parameters
*   Task_Param_t.pTaskFcn        = &foo_task;
*   Task_Param_t.pName           = cTaskName;
*   Task_Param_t.uiStack_Size    = 1024;
*   Task_Param_t.pParameters     = NULL;
*   Task_Param_t.uiTask_Priority = FOO_TASK_PRIORITY;
*   //Create the task
*   eEC = eOSAL_Task_Create(&Task_Param_t);
*   ASSERT(eEC == ER_OK);
*
*   //Remaining code
*   ...
*   return;
* }
******************************************************************************/
ERROR_CODE eOSAL_Task_Create(pOSAL_Task_Parameters pParam);

/******************************************************************************
* Name: eOSAL_Task_Delete
* Description:
*   Shuts down and deletes an existing task.
*
* Parameters:
*   (pOSAL_Task_Handle) pHandle: pointer to the task handle to delete.
*
* Returns:
*   (ERROR_CODE): description
*     = ER_OK: value description
*     = ER_FAIL:
*
* Example:
* static bool bFoo_Task_Done = false;
*
* void foo_task(void * pvParam)
* {
*   //task startup code
*   ...
*
*   while(1)
*   {
*     //task code
*     ...
*
*     bFoo_Task_Done = true;
*   }
* }
*
* void foo(void)
* {
*   ERROR_CODE eEC;
*   OSAL_Task_Parameters_t Task_Param_t;
*
*   //Initialize the task parameters
*   ...
*   //Set the task parameters
*   ...
*   //Create the task
*   eEC = eOSAL_Task_Create(&Task_Param_t);
*   ASSERT(eEC == ER_OK);
*
*   while(1)
*   {
*     if(bFoo_Task_Done == true)
*       break;
*     else
*       eOSAL_delay(1, NULL);
*   }
*
*   //delete task
*   eEC = eOSAL_Task_Delete(pHandle);
*   ASSERT(eEC == ER_OK);
*
*   //remaining code
*   ...
*   return;
* }
******************************************************************************/
ERROR_CODE eOSAL_Task_Delete(pOSAL_Task_Handle pHandle);

/******************************************************************************
* name: eOSAL_OS_start
* description: OSAL start abstraction function. For most operating systems
*              this function will not return once called. Do not rely on it
*              to return an error code.
* param description: none
* return value description: ERROR_CODE - ER_OK: Most OS's do not return once
*                                        their OS start function was called.
*                                        Do not rely on this return value.
******************************************************************************/
ERROR_CODE eOSAL_OS_start(void);

/******************************************************************************
* name: eOSAL_Is_OS_Running
* description: determines if the OS is running and returns the corresponding error code
* param description: none
* return value description: ERROR_CODE - ER_TRUE: OS is running
*                                      - ER_FALSE: OS is not running
******************************************************************************/
ERROR_CODE eOSAL_Is_OS_Running(void);

/******************************************************************************
* name: eOSAL_delay
* description: delays for <delay parameter> number of milliseconds. Will call
*              either a hardware or OS delay depending on if the OS is running
*              or not.
* param description: uint32_t : the number of milliseconds to delay
*                    uint32_t - pointer: pointer to variable that will contain
*                    the number of milliseconds delayed.
* return value description: ERROR_CODE - ER_OK: delay was successful
*                           ERROR_CODE - ER_FAIL: delay was not successful
******************************************************************************/
ERROR_CODE eOSAL_delay                   (uint32_t uiDelay, uint32_t * puiMS_Delayed);

/******************************************************************************
* name: eOSAL_Mailbox_Params_Init
* description: initalizes the OSAL mailbox parameters to the system defaults
*
* param description: OSAL_Mailbox_Handle_t - pointer: pointer to the OSAL mailbox handle
*                    uiWait_time       - OS wait time before returning, default OSAL_MAILBOX_DEFAULT_WAIT_FOREVER
*                    uiBuff_Size       - size of each mailbox message,  default OSAL_MAILBOX_DEFAULT_BUFF_SIZE
*                    pvBuff            - Pointer to the mailbox buffer, default NULL
*                    uiNumber_of_items - number of mailbox messages,    default OSAL_MAILBOX_DEFAULT_MAX_MESSAGES
*                    pvMailbox_Handle  - OS specific mailbox handle,    default NULL
*
* return value description: ERROR_CODE - ER_OK: mailbox parameters successfully initalized
******************************************************************************/
ERROR_CODE eOSAL_Mailbox_Params_Init     (OSAL_Mailbox_Handle_t * ptMbox_handle);

/******************************************************************************
* name: eOSAL_Mailbox_Create
* description:
* param description: type - value: value description (in order from left to right)
*                    bool - true: do action when set to true
*                    typedef struct OSAL_Mailbox_Handle_t
*                    {
*                      uint16_t uiWait_time;
*                      void * pvBuff;
*                      void * pvMailbox_Handle;
*                    }OSAL_Mailbox_Handle_t;
* return value description: type - value: value description
******************************************************************************/
ERROR_CODE eOSAL_Mailbox_Create          (OSAL_Mailbox_Handle_t * ptMbox_handle);
ERROR_CODE eOSAL_Mailbox_Get_msg         (OSAL_Mailbox_Handle_t * ptMailbox_handle);
ERROR_CODE eOSAL_Mailbox_Post_msg        (OSAL_Mailbox_Handle_t * ptMailbox_handle);
ERROR_CODE eOSAL_Queue_Params_Init       (OSAL_Queue_Parameters_t * ptQueue_param);
ERROR_CODE eOSAL_Queue_Create            (OSAL_Queue_Parameters_t * ptQueue_param, OSAL_Queue_Handle_t ** pQueue_Handle);

ERROR_CODE eOSAL_Queue_Delete(OSAL_Queue_Handle_t * ptQueue_handle);

ERROR_CODE eOSAL_Queue_Get_msg           (OSAL_Queue_Handle_t * ptQueue_handle, void * pMsg);
ERROR_CODE eOSAL_Queue_Post_msg          (OSAL_Queue_Handle_t * ptQueue_handle, void * pMsg);

/******************************************************************************
* Name: eOSAL_Queue_Post_msg_ISR
* Description:
*   Post a message to a queue from an ISR routine.
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Queue_Post_msg_ISR(OSAL_Queue_Handle_t * ptQueue_handle, void * pMsg);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Params_Init   (pOSAL_Semaphore_Parameters pParameters);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Create(pOSAL_Semaphore_Parameters pParameters, pOSAL_Semaphore_Handle * pSemaphore_Handle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Delete(pOSAL_Semaphore_Handle pSemaphore_Handle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Wait          (pOSAL_Semaphore_Handle pSemaphore_Handle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Wait_Timeout  (pOSAL_Semaphore_Handle pSemaphore_Handle, uint32_t uiTimeout);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Semaphore_Post          (pOSAL_Semaphore_Handle pSemaphore_Handle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Mutex_Create(pOSAL_Mutex_Parameters pParameters, pOSAL_Mutex_Handle *pMutex_Handle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Mutex_Get(pOSAL_Mutex_Handle pHandle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Mutex_Return(pOSAL_Mutex_Handle pHandle);

/******************************************************************************
* Name: eOSAL_Data_Mutex_Create
* Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Data_Mutex_Create(pOSAL_Data_Mutex_Parameters pParameters, OSAL_Data_Mutex_Handle_t ** pHandle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Data_Mutex_Delete(pOSAL_Data_Mutex_Handle pHandle);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Data_Mutex_Get(pOSAL_Data_Mutex_Handle pHandle, void ** pData);

/******************************************************************************
*todo: Name: [put name here]
*todo: Description:
*   [put description here]
*
*todo: Parameters:
*   (type) name: description (in order from left to right)
*     = value(optional): description if value set
*     -or-
*     ->(type) name: description if member of struct
*       = value(optional): description if member of struct value set
*   example:
*   (bool) bVar: do action option
*     = false: do action when set to false
*     = true: do other action when set to true
*   (pPub_Example_Struct) pParam: pointer to the param structure
*     ->(int)iVar1: description
*     ->(int *)pVar2: description
*     ->(bool)bVar3: description
*     ->(PUB_EXAMPLE_ENUM)eENUM: description
*       = PUB_ENUM_A: do action when set to _A
*       = PUB_ENUM_B: do action when set to _B
*       = PUB_ENUM_C: do action when set to _C
*     ->void (* pCallback_Fcn)(void * param): Function pointer for callback.
*
*todo: Returns:
*   (type): description
*     = value (optional): value description
*   examples:
*   (bool):
*     = true: did function action and result is true
*     = false: did function action and result is false
*   (int): integer value description after function action
*   (pPub_Example_Struct):
*     = (uint32_t *): address of the created object
*     =             - NULL: created object fail
*
* todo:Example:
* void foo(void)
* {
*   //Function usage
*   iFilename_or_abreviation_funciton()
* }
******************************************************************************/
ERROR_CODE eOSAL_Data_Mutex_Return(pOSAL_Data_Mutex_Handle pHandle, void ** pData);


#endif //PROJ_CONFIG_USE_UTIL_OSAL
#endif //__FILE_NAME_H__
